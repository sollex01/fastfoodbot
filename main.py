from aiogram import Dispatcher, executor, Bot
from aiogram.types import Message, CallbackQuery, LabeledPrice
from keyboards import *
from database import *
from dotenv import load_dotenv
import os
from datetime import datetime

load_dotenv()

TOKEN = os.getenv('TOKEN')

PAYMENT_KEY = os.getenv('PAYMENT_KEY')

bot = Bot(TOKEN, parse_mode='HTML')

dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def command_start(message: Message):
    full_name = message.from_user.full_name
    await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ <b>{full_name}</b>/\n–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç  –í–∫—É—Å–Ω—è—Ö–∞ –±–æ—Ç')
    await register_user(message)


async def register_user(message: Message):
    chat_id = message.chat.id
    full_name = message.from_user.full_name
    user = first_select_user(chat_id)  # –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    if user:
        await message.answer('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
        await show_main_menu(message)
    else:
        first_register_user(chat_id, full_name)  # –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–∏—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ
        await message.answer('–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º', reply_markup=generate_phone_button())


#  –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(content_types=['contact'])
async def finish_register(message: Message):
    chat_id = message.chat.id
    phone = message.contact.phone_number
    print(phone)
    update_user_to_finish_register(chat_id, phone)  # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–ø –≤–Ω–µ—Å–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–π—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await create_cart_for_user(message)  # –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—å—Å—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
    await show_main_menu(message)


async def create_cart_for_user(message: Message):
    chat_id = message.from_user.id
    print(chat_id)
    try:
        insert_to_cart(chat_id)
    except:
        pass


async def show_main_menu(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', reply_markup=generate_main_menu())


@dp.message_handler(lambda message: '‚úÖ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑' in message.text)
async def make_order(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=generate_category_menu())


@dp.callback_query_handler(lambda call: 'category' in call.data)
async def show_products(call: CallbackQuery):
    chat_id = call.message.chat.id  # –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º id —Ç–≥ –≤ —Å–∏–≥–Ω–∞–ª–µ
    message_id = call.message.message_id  # –ø–æ–ª—É—á–∞—é id —Å–∞–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    _, category_id = call.data.split('_')
    category_id = int(category_id)
    await bot.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç', chat_id, message_id,
                                reply_markup=generate_products_by_category(category_id))


@dp.callback_query_handler(lambda call: 'main_menu' in call.data)
async def return_to_main_menu(call: CallbackQuery):
    chat_id = call.message.chat.id  # –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º id —Ç–≥ –≤ —Å–∏–≥–Ω–∞–ª–µ
    message_id = call.message.message_id
    await bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
                                reply_markup=generate_category_menu())


@dp.callback_query_handler(lambda call: 'product' in call.data)
async def show_detail_product(call: CallbackQuery):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    _, product_id = call.data.split('_')
    product_id = int(product_id)

    product = get_product_detail(product_id)
    print(product)
    await bot.delete_message(chat_id, message_id)
    with open(product[-1], mode='rb') as img:
        await bot.send_photo(chat_id=chat_id,
                             photo=img,
                             caption=f'''{product[2]}

–ò–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã: {product[4]}

–¶–µ–Ω–∞: {product[3]} —Å—É–º–º''', reply_markup=generate_product_detail_menu(product_id=product_id, category_id=product[1]))


@dp.callback_query_handler(lambda call: 'back' in call.data)
async def return_to_category(call: CallbackQuery):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    _, category_id = call.data.split('_')
    await bot.delete_message(chat_id, message_id)
    await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=generate_products_by_category(category_id))


@dp.callback_query_handler(lambda call: 'cart' in call.data)
async def add_product_cart(call: CallbackQuery):
    chat_id = call.message.chat.id
    _, product_id, quantity = call.data.split('_')
    product_id, quantity = int(product_id), int(quantity)

    cart_id = get_user_cart_id(chat_id)  # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è id –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–≥ id
    product = get_product_detail(product_id)  # —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ

    final_price = product[3] * quantity  # –ø–æ–ª—É—á–∞—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –≤—ã–±—Ä–æ–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞

    if insert_or_update_cart_product(cart_id, product[2], quantity, final_price):
        await bot.answer_callback_query(call.id, '–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')
    else:
        await bot.answer_callback_query(call.id, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–∑–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ')


@dp.message_handler(regexp='üõí –ö–æ—Ä–∑–∏–Ω–∞')
async def show_cart(message: Message, edit_message: bool = False):
    chat_id = message.chat.id
    cart_id = get_user_cart_id(chat_id)

    try:
        update_total_product_price(cart_id)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —Å—É–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –∫–æ–ª-–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤

    except Exception as e:
        print(e)
        await message.answer('–ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É')
        return

    cart_products = get_cart_products(cart_id)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ù–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞, –∫–æ–ª-–≤–æ, —Å—Ç–æ–∏–º–æ—Å—Ç—å
    total_products, total_price = get_total_product_price(cart_id)  # –ü–æ–ª—É—á –æ–±—â —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –∫–æ–ª-–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤

    text = '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞: \n\n'
    i = 0
    for product_name, quantity, final_price in cart_products:
        i += 1
        text += f'''{i}. {product_name}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}
–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {final_price}\n\n'''

    text += f'''–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {total_products}
–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ {total_price}'''

    print(edit_message)

    if edit_message:
        await bot.edit_message_text(text, chat_id, message.message_id, reply_markup=generate_cart_menu(cart_id))
    else:
        await bot.send_message(chat_id, text, reply_markup=generate_cart_menu(cart_id))


@dp.callback_query_handler(lambda call: 'delete' in call.data)
async def delete_cart_product(call: CallbackQuery):
    _, cart_product_id = call.data.split('_')
    message = call.message
    cart_product_id = int(cart_product_id)

    delete_cart_product_from_database(cart_product_id)

    await bot.answer_callback_query(call.id, text='–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω')
    await show_cart(message, edit_message=True)


@dp.callback_query_handler(lambda call: 'order' in call.data)
async def create_order(call: CallbackQuery):
    chat_id = call.message.chat.id

    time_now = datetime.now().strftime('%H:%M')
    data = datetime.now().strftime('%d.%m.%Y')

    _, cart_id = call.data.split('_')
    cart_id = int(cart_id)

    cart_products = get_cart_products(cart_id)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ù–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞, –∫–æ–ª-–≤–æ, —Å—Ç–æ–∏–º–æ—Å—Ç—å
    total_products, total_price = get_total_product_price(cart_id)  # –ü–æ–ª—É—á –æ–±—â —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –∫–æ–ª-–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤

    text = '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞: \n\n'
    i = 0
    for product_name, quantity, final_price in cart_products:
        i += 1
        text += f'''{i}. {product_name}
    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}
    –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {final_price}\n\n'''

    text += f'''–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {total_products}
    –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ {total_price}'''

    # –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
    await bot.send_invoice(
        chat_id=chat_id,
        title=f'–ó–∞–∫–∞–∑ ‚Ññ{cart_id}',
        description=text,
        payload='bot-defined invoice payload',
        provider_token=PAYMENT_KEY,
        currency='UZS',
        prices=[
            LabeledPrice(label='–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å', amount=int(total_price * 100)),
            LabeledPrice(label='–î–æ—Å—Ç–∞–≤–∫–∞', amount=1000000)
        ],
        start_parameter='start_parameter'
    )


@dp.pre_checkout_query_handler(lambda query: True)
async def checkout(pre_checkout_query):
    await bot.answer_pre_checkout_query(pre_checkout_query.id,
                                        ok=True,
                                        error_message='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã')


@dp.message_handler(content_types=['successful_payment'])
async def get_payment(message):
    chat_id = message.chat.id
    cart_id = get_user_cart_id(chat_id)
    await bot.send_message(chat_id, '–£—Ä–∞ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –ú—ã –≤–∞—Å –∫–∏–Ω—É–ª–∏')
    drop_cart_products_default(cart_id)


@dp.message_handler(regexp='üìÉ –ò—Å—Ç–æ—Ä–∏—è')
async def get_history(message: Message):
    full_name = message.from_user.full_name
    await bot.send_message(message.chat.id, f'–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: 04-05-2023\n'
                                            f'–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: 20:06:10.2323343\n'
                                            f'–ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞: {full_name}\n'
                                            f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 9\n'
                                            f'–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: 252000')


executor.start_polling(dp)
